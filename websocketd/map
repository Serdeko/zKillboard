#!/usr/bin/env php
<?php
if(ob_get_level() == 0)
		ob_start();

ob_implicit_flush();

// Load the config to get the stomp details
require_once(__DIR__ . "/../config.php");

$start = date("i");

restart:
$stomp = new Stomp($stompServer, $stompUser, $stompPassword);
$stomp->subscribe("/topic/kills");
while(true)
{
	if(date("i") > $start || date("i") == 0)
	{
		$stomp = null;
		if(date("i") == 0)
			$start = 0;
		else
			$start = date("i");
		// Yeeeees a goto...
		goto restart;
	}

	try
	{
	        $frame = $stomp->readFrame();
	        if(!empty($frame))
	        {
	                if(!empty($frame->body))
	                {
	                        $data = json_decode($frame->body, true);
				if(!isset($data["killID"]))
					throw new Exception("Error, the data i just got doesn't seem like the data i should've gotten..");

	                        $map = json_encode(
	                                array(
	                                        "solarSystemID" => $data["solarSystemID"],
	                                        "killID" => $data["killID"],
	                                        "characterID" => $data["victim"]["characterID"],
	                                        "corporationID" => $data["victim"]["corporationID"],
	                                        "allianceID" => $data["victim"]["allianceID"],
	                                        "shipTypeID" => $data["victim"]["shipTypeID"],
	                                        "killTime" => $data["killTime"],
	                                        "involved" => count($data["attackers"]),
	                                        "totalValue" => isset($data["zkb"]["totalValue"]) ? $data["zkb"]["totalValue"] : NULL,
	                                        "pointsPrInvolved" => isset($data["zkb"]["points"]) ? $data["zkb"]["points"] : NULL
	                                ), JSON_NUMERIC_CHECK | JSON_UNESCAPED_SLASHES
	                        );
	
	                        fwrite(STDOUT, $map."\n");
	                        ob_flush();
	                        flush();
	                }
	                $stomp->ack($frame->headers["message-id"]);
	        }
		else
			fwrite(STDOUT, json_encode(array("ping"))."\n");
	}
	catch (Exception $e)
	{
                fwrite(STDOUT, json_encode(array("error" => $e->getMessage())));
                $stomp = NULL;
		// mmm goto <3
		goto restart;
	}
}
